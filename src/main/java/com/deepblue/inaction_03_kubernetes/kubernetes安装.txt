---------------------------------------------------------- tar.gz 包安装 ----------------------------------------------------------
TODO 注意: 安装的后来, 机器非常的热, 怕 CPU 烧了, 故直接停止安装, 放弃这种方式, 有计算机资源的可以自己尝试!

环境: 5台 Linux 机器

    1台 etcd

    1台 Kubernetes Master

    3台 Kubernetes Node

安装 etcd:

    下载:
    curl -L  https://github.com/coreos/etcd/releases/download/v2.2.0/etcd-v2.2.0-linux-amd64.tar.gz -o etcd-v2.2.0-linux-amd64.tar.gz

    解压:
    tar xzvf etcd-v2.2.0-linux-amd64.tar.gz

    配置:
    vim /etc/profile

    export ETCD_HOME=/home/etcd-v2.2.0-linux-amd64
    export PATH=$PATH:$ETCD_HOME

    source /etc/profile

    vim /ect/hosts

    192.168.188.22 etcd
    192.168.188.23 kube-master
    192.168.188.24 kube-node-1
    192.168.188.25 kube-node-2
    192.168.188.26 kube-node-3

    启动:
    etcd --name etcd \
    -listen-client-urls http://etcd:2379,http://etcd:4001 \
    -advertise-client-urls http://etcd:2379,http://etcd:4001 \
    >> /var/log/etcd.log 2>&1 &

    验证集群:
    etcdctl -C http://etcd:4001 cluster-health

安装 kubernetes master:

    下载:
    cd /home/linux_libs/
    wget https://github.com/kubernetes/kubernetes/releases/download/v1.1.1/kubernetes.tar.gz

    解压:
    tar -zxvf kubernetes.tar.gz
    [root@kube-master linux_libs]# cd kubernetes/server/
    tar -zxvf kubernetes-server-linux-amd64.tar.gz

    移动:
    [root@kube-master server]# mv kubernetes /home/


    运行 master 上的组件:
        cd /home/kubernetes/server/bin

        1、运行 kubernetes api server
            ./kube-apiserver \
            --logtostderr=true --v=0 \
            --etcd-servers=http://etcd:4001 \
            --insecure-bind-address=0.0.0.0 --insecure-port=8080 \
            --service-cluster-ip-range=192.168.188.0/24 \
            >> /var/log/kube-apiserver.log 2>&1 &


        2、运行 kubernetes controller manager
            ./kube-controller-manager \
            --logtostderr=true --v=0 \
            --master=http://kube-master:8080 \
            >> /var/log/kube-controller-manager.log 2>&1 &


        3、运行 kubernetes scheduler
            ./kube-scheduler \
            --logtostderr=true --v=0 \
            --master=http://kube-master:8080 \
            >> /var/log/kube-scheduler.log 2>&1 &

        4、运行 kubernetes proxy
            ./kube-proxy \
            --logtostderr=true --v=0 \
            --master=http://kube-master:8080 \
            >> /var/log/kube-proxy.log 2>&1 &


        [root@kube-master bin]# ps -ef|grep kube
        root       1817   1525  0 21:10 pts/0    00:00:07 ./kube-apiserver --logtostderr=true --v=0 --etcd-servers=http://etcd:4001 --insecure-bind-address=0.0.0.0 --insecure-port=8080 --service-cluster-ip-range=192.168.188.0/24
        root       1858   1525  0 21:20 pts/0    00:00:13 ./kube-controller-manager --logtostderr=true --v=0 --master=http://kube-master:8080
        root       1884   1525  0 21:24 pts/0    00:00:00 ./kube-scheduler --logtostderr=true --v=0 --master=http://kube-master:8080
        root       1890   1525  0 21:24 pts/0    00:00:01 ./kube-proxy --logtostderr=true --v=0 --master=http://kube-master:8080
        root       2649   2397  0 21:54 pts/1    00:00:00 grep --color=auto kube


安装 kubernetes node1, kubernetes node2, kubernetes node3

    下载:
    cd /home/linux_libs/
    wget https://github.com/kubernetes/kubernetes/releases/download/v1.1.1/kubernetes.tar.gz

    解压:
    tar -zxvf kubernetes.tar.gz
    [root@kube-master linux_libs]# cd kubernetes/server/
    tar -zxvf kubernetes-server-linux-amd64.tar.gz

    移动:
    [root@kube-master server]# mv kubernetes /home/

    安装 docker: 参考 docker实战.txt 第2章

    运行 kubernetes node 中的组件:

        1、运行 docker
            systemctl start docker

        2、运行 kubelet
            ./kubelet \
            --logtostderr=true --v=0 \
            --config=/etc/kubernetes/manifests \
            --address=0.0.0.0 \
            --api-servers=http://kube-master:8080 \
            >> /var/log/kubelet.log 2>&1 &

        3、运行 kube-proxy
            ./kube-proxy \
            --logtostderr=true --v=0 \
            --master=http://kube-master:8080 \
            >> /var/log/kube-proxy.log 2>&1 &


查看 kubernetes master 节点状态 (master 节点下查询):

    [root@kube-master bin]# ./kubectl -s http://kube-master:8080 get componentstatus
    NAME                 STATUS    MESSAGE              ERROR
    controller-manager   Healthy   ok                   nil
    scheduler            Healthy   ok                   nil
    etcd-0               Healthy   {"health": "true"}   nil

    [root@kube-master bin]# ./kubectl -s http://kube-master:8080 get nodes
    NAME          LABELS                               STATUS    AGE
    kube-node-1   kubernetes.io/hostname=kube-node-1   Ready     56m:
    kube-node-2   kubernetes.io/hostname=kube-node-2   Ready     7m
    kube-node-3   kubernetes.io/hostname=kube-node-3   Ready     4m


---------------------------------------------------------- kubeadm 方式安装 ----------------------------------------------------------

参考教程: https://kubernetes.io/zh/docs/setup/production-environment/tools/kubeadm/install-kubeadm/

环境: 3台 linux 机器, 1台 master, 2台 node;

    3台机器 分别执行 修改 hostname 命令:

        hostnamectl set-hostname kube-master
        hostnamectl set-hostname kube-node-1
        hostnamectl set-hostname kube-node-2

    3台机器 分别执行 关闭掉 swap 命令: TODO kubelet 在 1.8 版本以后强制要求 swap 必须关闭!!!

        mount -n -o remount,rw /

        vim /etc/fstab

        注释掉下面一行:
        # /dev/mapper/centos-swap swap                    swap    defaults        0 0

        验证:
        free m

    3台机器 分别执行 安装并启动 docker, 参考 docker实战.txt

    3台机器 分别执行 安装 kubelet kubeadm kubectl 执行以下操作:

        yum remove -y kubelet kubeadm kubectl

        # 配置kubernetes.repo的源，由于官方源国内无法访问，这里使用阿里云yum源
        # TODO repo_gpgcheck=1 时报错, 改为 repo_gpgcheck=1 ; 这块 GPG 认证相关的东西, 参考 java_security
        cat <<EOF > /etc/yum.repos.d/kubernetes.repo
        [kubernetes]
        name=Kubernetes
        baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/
        enabled=1
        gpgcheck=1
        repo_gpgcheck=0
        gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg
        EOF
        setenforce 0
        sed -i 's/^SELINUX=enforcing$/SELINUX=permissive/' /etc/selinux/config
        yum install -y kubelet-1.21.0 kubeadm-1.21.0 kubectl-1.21.0
        systemctl enable kubelet

    # master 节点 测试使用
        # yum remove -y kubelet kubeadm kubectl
        # systemctl daemon-reload
        # systemctl restart kubelet
        # systemctl status kubelet

    部署 kubernetes master
        重置一下
        [root@kube-master ~]# kubeadm reset

        初始化
        kubeadm init \
        --apiserver-advertise-address=192.168.188.27 \
        --image-repository registry.aliyuncs.com/google_containers \
        --kubernetes-version v1.21.0 \
        --service-cidr=10.96.0.0/12 \
        --pod-network-cidr=10.244.0.0/16 \
        --ignore-preflight-errors=all

        # kubeadm init 最后执行结果
            ...
            ...
            Your Kubernetes control-plane has initialized successfully!

            To start using your cluster, you need to run the following as a regular user:

              mkdir -p $HOME/.kube
              sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
              sudo chown $(id -u):$(id -g) $HOME/.kube/config

            Alternatively, if you are the root user, you can run:

              export KUBECONFIG=/etc/kubernetes/admin.conf

            You should now deploy a pod network to the cluster.
            Run "kubectl apply -f [podnetwork].yaml" with one of the options listed at:
              https://kubernetes.io/docs/concepts/cluster-administration/addons/

            Then you can join any number of worker nodes by running the following on each as root:

            kubeadm join 192.168.188.27:6443 --token zt47af.y3abgdkxkhxu9ewp \
                    --discovery-token-ca-cert-hash sha256:bb1652c0ed0278db0d74c72f51b6a4f6302f848cbcd05a59855774b57b2b94c8

        master 节点下按照指示执行:
            mkdir -p $HOME/.kube
            sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
            sudo chown $(id -u):$(id -g) $HOME/.kube/config


    部署 kubernetes node (2个node 节点都执行):

        添加 node 节点到集群中:

        kubeadm join 192.168.188.27:6443 --token zt47af.y3abgdkxkhxu9ewp \
                --discovery-token-ca-cert-hash sha256:bb1652c0ed0278db0d74c72f51b6a4f6302f848cbcd05a59855774b57b2b94c8


    部署 CNI 网略插件 (master 节点执行就OK):
        /**
         * raw.githubusercontent.com 是防火强之外的网络, 无法访问
         * 首先通过 http://ip.tool.chinaz.com 网站查找 raw.githubusercontent.com 对应的IP地址, 添加在自己的 /etc/hosts 中!
         */
        kubectl apply -f https://raw.githubusercontent.com/flannel-io/flannel/master/Documentation/kube-flannel.yml


        验证:
            [root@kube-master ~]# kubectl get pods -n kube-system
            NAME                                  READY   STATUS             RESTARTS   AGE
            coredns-545d6fc579-b2p7p              0/1     ImagePullBackOff   0          7h57m
            coredns-545d6fc579-cvhcg              0/1     ImagePullBackOff   0          7h57m
            etcd-kube-master                      1/1     Running            0          7h57m
            kube-apiserver-kube-master            1/1     Running            0          7h57m
            kube-controller-manager-kube-master   1/1     Running            0          7h57m
            kube-flannel-ds-d76ps                 1/1     Running            0          9m4s
            kube-flannel-ds-pwqwh                 1/1     Running            0          9m4s
            kube-flannel-ds-qswbv                 1/1     Running            0          9m4s
            kube-proxy-ch7rl                      1/1     Running            0          7h47m
            kube-proxy-pvswv                      1/1     Running            0          7h47m
            kube-proxy-qkq8j                      1/1     Running            0          7h57m
            kube-scheduler-kube-master            1/1     Running            0          7h57m

            [root@kube-master ~]# kubectl get nodes
            NAME          STATUS   ROLES                  AGE     VERSION
            kube-master   Ready    control-plane,master   7h56m   v1.21.0
            kube-node-1   Ready    <none>                 7h46m   v1.21.0
            kube-node-2   Ready    <none>                 7h46m   v1.21.0


    测试 kubernetes 集群:
        [root@kube-master ~]# kubectl create deployment nginx --image=nginx
        deployment.apps/nginx created

        [root@kube-master ~]# kubectl expose deployment nginx --port=80 --type=NodePort
        service/nginx exposed

        [root@kube-master ~]# kubectl get pod,svc
        NAME                         READY   STATUS    RESTARTS   AGE
        pod/nginx-6799fc88d8-4nz4q   1/1     Running   0          112s

        NAME                 TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)        AGE
        service/kubernetes   ClusterIP   10.96.0.1        <none>        443/TCP        8h
        service/nginx        NodePort    10.100.162.171   <none>        80:31650/TCP   16s

        浏览器中打开: http://192.168.188.27:31650






































