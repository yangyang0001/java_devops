--------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------- 第1章 Docker 简介 ---------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------
docker 的理念: 打破原来代码即应用的概念, 代码即应用 到 运行环境即应用的概念, 类似于 虚拟机的 clone!

docker 解决了 运行环境和配置的 一种容器, 大大简化了 不同机器的环境的配置和部署问题!

官方网站: https://www.docker.com, https://www.docker-cn.com(中文版)
仓库网站: https://hub.docker.com

docker 三大要素: 容器, 仓库, 镜像!


--------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------- 第2章 Docker 安装 ---------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------
准备环境
    uname -r
    cat /etc/redhat-release

docker 架构:
    镜像(image)     : 类似于 class 文件!
    容器(container) : 类似于 instance 文件, 每个 容器是一个集装箱, 都是隔离的; 可以看做是 简易版的 linux 上安装了一些 redis, mysql ...
    仓库(repository): 存放 镜像文件的地方!

    一般情况下, 容器只包含一种 功能, 类似于 redis, mysql, zookeeper ...


卸载旧版本
    yum remove docker \
              docker-client \
              docker-client-latest \
              docker-common \
              docker-latest \
              docker-latest-logrotate \
              docker-logrotate \
              docker-engine

    设置存储库 安装 yum
    yum install -y yum-utils

    yum-config-manager \
        --add-repo \
        https://download.docker.com/linux/centos/docker-ce.repo

    设置存储库
    yum install docker-ce docker-ce-cli containerd.io -y

    查看 docker 版本
    [root@localhost ~]# docker --version
    Docker version 20.10.12, build e91ed57

    启动 docker, 并设置开机启动
    systemctl enable docker && systemctl start docker

    通过运行映像来验证 docker 引擎是否已正确安装
    docker run hello-world


如果在 DockerHub 上拉取不了 则配置相关的 镜像加速器
    参考地址:
        https://www.runoob.com/docker/docker-mirror-acceleration.html
        https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors

    vim /etc/docker/daemon.json

    sudo tee /etc/docker/daemon.json <<-'EOF'
    {
      "registry-mirrors": ["https://3ojv7nos.mirror.aliyuncs.com"]
    }
    EOF
    sudo systemctl daemon-reload
    sudo systemctl restart docker



--------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------- 第3章 Docker 命令 ---------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------
常用命令:
    docker version
        举例:
        [root@localhost ~]# docker version
        Client: Docker Engine - Community
         Version:           20.10.12
         API version:       1.41
         Go version:        go1.16.12
         Git commit:        e91ed57
         Built:             Mon Dec 13 11:45:41 2021
         OS/Arch:           linux/amd64
         Context:           default
         Experimental:      true

        Server: Docker Engine - Community
         Engine:
          Version:          20.10.12
          API version:      1.41 (minimum version 1.12)
          Go version:       go1.16.12
          Git commit:       459d0df
          Built:            Mon Dec 13 11:44:05 2021
          OS/Arch:          linux/amd64
          Experimental:     false
         containerd:
          Version:          1.4.13
          GitCommit:        9cc61520f4cd876b86e77edfeb88fbcd536d1f9d
         runc:
          Version:          1.0.3
          GitCommit:        v1.0.3-0-gf46b6ba
         docker-init:
          Version:          0.19.0
          GitCommit:        de40ad0


    docker info
        举例:
        [root@localhost ~]# docker info
        Client:
         Context:    default
         Debug Mode: false
         Plugins:
          app: Docker App (Docker Inc., v0.9.1-beta3)
          buildx: Docker Buildx (Docker Inc., v0.7.1-docker)
          scan: Docker Scan (Docker Inc., v0.12.0)

        Server:
         Containers: 4
          Running: 0
          Paused: 0
          Stopped: 4
         Images: 1
         Server Version: 20.10.12
         Storage Driver: overlay2
          Backing Filesystem: xfs
          Supports d_type: true
          Native Overlay Diff: true
          userxattr: false
         Logging Driver: json-file
         Cgroup Driver: cgroupfs
         Cgroup Version: 1
         Plugins:
          Volume: local
          Network: bridge host ipvlan macvlan null overlay
          Log: awslogs fluentd gcplogs gelf journald json-file local logentries splunk syslog
         Swarm: inactive
         Runtimes: io.containerd.runtime.v1.linux runc io.containerd.runc.v2
         Default Runtime: runc
         Init Binary: docker-init
         containerd version: 9cc61520f4cd876b86e77edfeb88fbcd536d1f9d
         runc version: v1.0.3-0-gf46b6ba
         init version: de40ad0
         Security Options:
          seccomp
           Profile: default
         Kernel Version: 3.10.0-1127.el7.x86_64
         Operating System: CentOS Linux 7 (Core)
         OSType: linux
         Architecture: x86_64
         CPUs: 2
         Total Memory: 1.777GiB
         Name: localhost.localdomain
         ID: OVU5:ZOOK:DF7I:GXDG:MOW6:YHUL:3ATF:N7QC:24OL:WFDV:LJOF:X3RR
         Docker Root Dir: /var/lib/docker
         Debug Mode: false
         Registry: https://index.docker.io/v1/
         Labels:
         Experimental: false
         Insecure Registries:
          127.0.0.0/8
         Live Restore Enabled: false

        WARNING: bridge-nf-call-iptables is disabled
        WARNING: bridge-nf-call-ip6tables is disabled


    docker --help
        举例:
        [root@localhost ~]# docker --help

        Usage:  docker [OPTIONS] COMMAND

        A self-sufficient runtime for containers

        Options:
              --config string      Location of client config files (default "/root/.docker")
          -c, --context string     Name of the context to use to connect to the daemon (overrides DOCKER_HOST env var and default context set
                                   with "docker context use")
          -D, --debug              Enable debug mode
          -H, --host list          Daemon socket(s) to connect to
          -l, --log-level string   Set the logging level ("debug"|"info"|"warn"|"error"|"fatal") (default "info")
              --tls                Use TLS; implied by --tlsverify
              --tlscacert string   Trust certs signed only by this CA (default "/root/.docker/ca.pem")
              --tlscert string     Path to TLS certificate file (default "/root/.docker/cert.pem")
              --tlskey string      Path to TLS key file (default "/root/.docker/key.pem")
              --tlsverify          Use TLS and verify the remote
          -v, --version            Print version information and quit

        Management Commands:
          app*        Docker App (Docker Inc., v0.9.1-beta3)
          builder     Manage builds
          buildx*     Docker Buildx (Docker Inc., v0.7.1-docker)
          config      Manage Docker configs
          container   Manage containers
          context     Manage contexts
          image       Manage images
          manifest    Manage Docker image manifests and manifest lists
          network     Manage networks
          node        Manage Swarm nodes
          plugin      Manage plugins
          scan*       Docker Scan (Docker Inc., v0.12.0)
          secret      Manage Docker secrets
          service     Manage services
          stack       Manage Docker stacks
          swarm       Manage Swarm
          system      Manage Docker
          trust       Manage trust on Docker images
          volume      Manage volumes

        Commands:
          attach      Attach local standard input, output, and error streams to a running container
          build       Build an image from a Dockerfile
          commit      Create a new image from a container's changes
          cp          Copy files/folders between a container and the local filesystem
          create      Create a new container
          diff        Inspect changes to files or directories on a container's filesystem
          events      Get real time events from the server
          exec        Run a command in a running container
          export      Export a container's filesystem as a tar archive
          history     Show the history of an image
          images      List images
          import      Import the contents from a tarball to create a filesystem image
          info        Display system-wide information
          inspect     Return low-level information on Docker objects
          kill        Kill one or more running containers
          load        Load an image from a tar archive or STDIN
          login       Log in to a Docker registry
          logout      Log out from a Docker registry
          logs        Fetch the logs of a container
          pause       Pause all processes within one or more containers
          port        List port mappings or a specific mapping for the container
          ps          List containers
          pull        Pull an image or a repository from a registry
          push        Push an image or a repository to a registry
          rename      Rename a container
          restart     Restart one or more containers
          rm          Remove one or more containers
          rmi         Remove one or more images
          run         Run a command in a new container
          save        Save one or more images to a tar archive (streamed to STDOUT by default)
          search      Search the Docker Hub for images
          start       Start one or more stopped containers
          stats       Display a live stream of container(s) resource usage statistics
          stop        Stop one or more running containers
          tag         Create a tag TARGET_IMAGE that refers to SOURCE_IMAGE
          top         Display the running processes of a container
          unpause     Unpause all processes within one or more containers
          update      Update configuration of one or more containers
          version     Show the Docker version information
          wait        Block until one or more containers stop, then print their exit codes

        Run 'docker COMMAND --help' for more information on a command.

        To get more help with docker, check out our guides at https://docs.docker.com/go/guides/

镜像命令:

    列出本地仓库中的 镜像
    docker images
    [root@localhost ~]# docker images
    REPOSITORY    TAG       IMAGE ID       CREATED        SIZE
    hello-world   latest    feb5d9fea6a5   5 months ago   13.3kB

    从 docker hub 上 查询相关 镜像
    docker search tomcat

    从 docker hub 上下载 镜像
    docker pull tomcat 等价于 docker pull tomcat:latest

    删除 镜像:
    docker rmi hello-world
    [root@localhost ~]# docker rmi hello-world
    Error response from daemon: conflict: unable to remove repository reference "hello-world" (must force) - container 48771fcbb6d1 is using its referenced image feb5d9fea6a5


容器命令:
    启动交互式容器:
    docker run -it centos

    查看当前 docker 下 运行了多少个容器
    [root@localhost ~]# docker ps
    CONTAINER ID   IMAGE     COMMAND       CREATED          STATUS          PORTS     NAMES
    00a170447dc8   centos    "/bin/bash"   15 seconds ago   Up 14 seconds             centos0001

    启动交互式容器: --name 参数
    docker run -it --name centos0001 centos

    关闭容器:
    exit(关闭容器) 或者 ctrl + p + q (容器不关闭, 暂时退出交互)

    启动容器: docker start container_id

    查询当前所有容器:
    [root@localhost ~]# docker ps -a
    CONTAINER ID   IMAGE         COMMAND               CREATED              STATUS                        PORTS     NAMES
    467a9c838f2b   centos        "/bin/bash"           About a minute ago   Up About a minute                       centos0002
    00a170447dc8   centos        "/bin/bash"           11 minutes ago       Exited (127) 5 minutes ago              centos0001
    39c50274f81b   centos        "--name centos0001"   15 minutes ago       Created                                 gracious_goldstine
    6f1fcc1ad36f   centos        "/bin/bash"           16 minutes ago       Exited (0) 16 minutes ago               affectionate_shirley
    e3d8770f2661   centos        "/bin/bash"           19 minutes ago       Exited (127) 16 minutes ago             jovial_lumiere
    064480b2954d   centos        "/bin/bash"           21 minutes ago       Exited (0) 20 minutes ago               strange_cori
    eb788da8cc2c   hello-world   "/hello"              3 hours ago          Exited (0) 3 hours ago                  trusting_pascal
    46a64613d52e   hello-world   "/hello"              6 hours ago          Exited (0) 6 hours ago                  pensive_lederberg
    46ddb124df1e   hello-world   "/hello"              7 hours ago          Exited (0) 7 hours ago                  wizardly_kilby
    48771fcbb6d1   hello-world   "/hello"              7 hours ago          Exited (0) 7 hours ago                  wonderful_leavitt
    --------------------------------------------------------------------------------------------------------------------------------------------
    启动容器举例:
    docker start 00a170447dc8

    优雅关闭容器:
    docker stop 00a170447dc8

    强制关闭容器:
    docker kill 467a9c838f2b

    -------------------------------------------------------------------------------------------------------------------------------------------

    删除已经停止的容器格式: docker rm container_id

    删除容器举例:
    docker rm 467a9c838f2b \
              00a170447dc8 \
              39c50274f81b \
              6f1fcc1ad36f \
              e3d8770f2661 \
              064480b2954d \
              eb788da8cc2c \
              46a64613d52e \
              46ddb124df1e \
              48771fcbb6d1

    --------------------------------------------------------------- 重要容器指令 ----------------------------------------------------------------

    以守护进程方式启动容器:
    docker run -d --name centos0001 centos

    TODO docker 机制: 如果 docker 运行的命令 不是那些 一直挂起的命令(例如 tail, top), 就会自动退出!

    查看容器日志:
    [root@localhost ~]# docker logs -f -t --tail 3 9deab90f1a73
    [root@localhost ~]# docker logs --tail -f -t --tail 9deab90f1a73


    查看容器内运行的进程格式: docker top container_id
    [root@localhost ~]# docker top 9deab90f1a73
    UID                 PID                 PPID                C                   STIME               TTY                 TIME                CMD
    root                6638                6618                0                   01:35               pts/0               00:00:00            /bin/bash


    查看容器内容的细节格式: docker inspect container_id
    [root@localhost ~]# docker inspect 9deab90f1a73
    结果为一个 json 数组 [.....]


    再次进入启动中的容器命令:

        进入运行中的容器格式: docker attach container_id
        举例:
        [root@localhost ~]# docker ps
        CONTAINER ID   IMAGE     COMMAND       CREATED        STATUS         PORTS     NAMES
        9deab90f1a73   centos    "/bin/bash"   15 hours ago   Up 7 seconds             centos0001
        [root@localhost ~]# docker attach 9deab90f1a73
        [root@9deab90f1a73 /]#

        进入运行中的容器格式: docker exec -it container_id /bin/bash     TODO 推荐使用
        举例:
        [root@localhost ~]# docker ps
        CONTAINER ID   IMAGE     COMMAND             CREATED          STATUS         PORTS                                       NAMES
        414f532c566e   tomcat    "catalina.sh run"   12 minutes ago   Up 2 minutes   0.0.0.0:8888->8080/tcp, :::8888->8080/tcp   tomcat0001
        [root@localhost ~]# docker exec -it 414f532c566e /bin/bash
        root@414f532c566e:/usr/local/tomcat#


    从容器内复制文件到 宿主机上:
    使用格式: docker cp [OPTIONS] CONTAINER:SRC_PATH DEST_PATH
    使用解释: docker cp container_id:容器内文件路径 宿主机目的路径;


    run 指令补充:
    docker run -it -p 主机端口号:容器端口号 镜像名称/IMAGE_ID
    docker run -it -p 8888:8080 --name tomcat0001 tomcat

    docker run -it -P tomcat 这是产生随机的端口 对应容器暴露端口, 采用的是 NAPT 技术(参考 java_computer_network)


--------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------- 第4章 镜像原理 ----------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------
docker 镜像是什么?
    镜像是一种 轻量级、可独立执行的软件包! UnionFS 联合文件系统是 镜像文件的 基础! 镜像就像一层一层的花卷;

docker 为什么采用分层结构的思想呢?
    举例 java 为什么有 继承和实现呢? 原因只有一个就是公用!

docker commit 命令:

    打镜像 命令:
        命名空间: 就是 DockerHub 上的账户名称, 我的为 yangyang0001, 这在 docker push 命令中非常重要!

        格式: docker commit -m "我的tomcat镜像" container_id 命名空间/镜像名称:TAG

        举例:
            docker commit -m "我的tomcat镜像" 414f532c566e yangyang0001/tomcat:1.0

        验证:
            [root@localhost ~]# docker images
            REPOSITORY            TAG       IMAGE ID       CREATED         SIZE
            yangyang0001/tomcat   1.0       4639dd8d4ea2   9 minutes ago   684MB
            tomcat                latest    7a287e4562ea   8 days ago      680MB
            nginx                 latest    c919045c4c2b   9 days ago      142MB
            mongo                 latest    dfda7a2cf273   3 months ago    693MB
            hello-world           latest    feb5d9fea6a5   5 months ago    13.3kB
            centos                latest    5d0da3dc9764   5 months ago    231MB

    使用 自己的镜像 运行容器:
        交互式运行容器 指令:
        docker run -it -p 8888:8080 --name tomcat0001 yangyang0001/tomcat:1.0

        后台是运行容器 指令:
        docker run -d -p 9999:8080 --name tomcat0002 yangyang0001/tomcat:1.0


    推送自己的镜像:
        docker push yangyang0001/tomcat:1.0

    再拉去自己的镜像:
        docker pull yangyang0001/tomcat:1.0

--------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------- 第5章 容器数据卷 ---------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------
什么是容器数据卷?
    将 docker 容器运行产生的数据 持久化到 文件中, 这中持久化功能的文件 就叫 容器数据卷! 目的实现数据的共享, 类似于 本地主机 和 虚拟机 之间的共享文件夹!
    共享文件夹中的 文件 能够达到 完全同步的效果! 和重启容器没有关系!

数据卷添加方式:
    命令添加数据卷:
        命令格式: docker run -it -v /宿主机绝对路径目录:/容器内目录:权限 镜像名称

        举例:
            可读可写:
            docker run -it --name centos0001 -v /mine_data:/container_data centos

            只读:
            docker run -it --name centos0001 -v /mine_data:/container_data:ro centos

    dockerfile 添加数据卷:

        编写 Dockerfile 的最佳实践地址: https://docs.docker.com/develop/develop-images/dockerfile_best-practices/
        GitHub 上的参考地址: https://github.com/docker-library

        1、编写 Dockerfile
        [root@localhost ~]# vim Dockerfile
            FROM centos

            VOLUME ["/container_data1", "/container_data2"]
            CMD echo "finished, success"
            CMD /bin/bash

        2、根据 Dockerfile 创建 自己的镜像
        [root@localhost ~]# docker build -f /root/Dockerfile -t yangyang0001/centos .
            Sending build context to Docker daemon  35.84kB
            Step 1/4 : FROM centos
             ---> 5d0da3dc9764
            Step 2/4 : VOLUME ["/container_data1", "/container_data2"]
             ---> Running in cb52b38e1338
            Removing intermediate container cb52b38e1338
             ---> fde550d0138d
            Step 3/4 : CMD echo "finished, success"
             ---> Running in 0ea6cd5054cd
            Removing intermediate container 0ea6cd5054cd
             ---> c8bec9b838ff
            Step 4/4 : CMD /bin/bash
             ---> Running in 6f3b2cd7227d
            Removing intermediate container 6f3b2cd7227d
             ---> 1957675f04a6
            Successfully built 1957675f04a6                 // 创建的 IMAGE_ID
            Successfully tagged yangyang0001/centos:latest

        3、查看创建的镜像
        [root@localhost ~]# docker images
            REPOSITORY            TAG       IMAGE ID       CREATED          SIZE
            yangyang0001/centos   latest    1957675f04a6   10 seconds ago   231MB       // 此镜像 即为 创建的镜像!
            yangyang0001/tomcat   1.0       4639dd8d4ea2   9 hours ago      684MB
            tomcat                latest    7a287e4562ea   8 days ago       680MB
            nginx                 latest    c919045c4c2b   9 days ago       142MB
            mongo                 latest    dfda7a2cf273   3 months ago     693MB
            hello-world           latest    feb5d9fea6a5   5 months ago     13.3kB
            centos                latest    5d0da3dc9764   5 months ago     231MB

        4、根据创建的镜像 运行一个 新的容器
            docker run -it --name centos0001 yangyang0001/centos

        5、验证 是否是 共享容器卷 docker inspect container_id 就可以看到如下:
        "Mounts": [
                    {
                        "Type": "volume",
                        "Name": "7797a375d588146ede3521394fd206b8fab53b651a1dbceecf4adccc341b94e0",
                        "Source": "/var/lib/docker/volumes/7797a375d588146ede3521394fd206b8fab53b651a1dbceecf4adccc341b94e0/_data",
                        "Destination": "/container_data1",
                        "Driver": "local",
                        "Mode": "",
                        "RW": true,
                        "Propagation": ""
                    },
                    {
                        "Type": "volume",
                        "Name": "c4389f0a30e90fdbd6896b99027f90ab133bc957ede1d0e528e93fd36d907646",
                        "Source": "/var/lib/docker/volumes/c4389f0a30e90fdbd6896b99027f90ab133bc957ede1d0e528e93fd36d907646/_data",
                        "Destination": "/container_data2",
                        "Driver": "local",
                        "Mode": "",
                        "RW": true,
                        "Propagation": ""
                    }
                ],

        其中的 source 就是 挂载的东西!

    数据卷 --volumes-from 的使用:
        docker run -it --name centos0001 yangyang0001/centos
        docker run -it --name centos0002 --volumes-from centos0001 yangyang0001/centos
        docker run -it --name centos0003 --volumes-from centos0001 yangyang0001/centos

        TODO 特别注意:
        --volumes from 特性: 一旦建立 不同容器间的 共享容器卷关系, 这种关系 就是互通的, 直到 最后一个容器死亡!

--------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------- 第6章 DockerFile -------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------
DockerFile 是什么?
    docker file 是 镜像文件的 代码 表示文件! 类比 Hello.java ---> Hello.class 和 image ---> DockerFile 的关系!

    书写 docker file 的参考地址, 以 centos 举例: https://github.com/CentOS

    编写 docker file 的过程: 参考 共享容器卷的 工程, 一共有三步:
        1、创建一个 dockerfile 文件, 并按照规范书写 docker file!
        2、docker build -f dockerfile -t 镜像名称:tag .
        3、docker run ...

DockerFile 构建解析过程
    1、每条保留字指令必须大写, 且必须跟随 参数
    2、指令 自顶向下 顺序执行
    3、# 表示注释符
    4、每条指令都产生一个新的镜像层, 并对镜像进行提交, 直至指令解析完成形成最终的镜像!

DockerFile 保留字指令
    FROM: 类似于 依赖哪个基础镜像, 类似于 java 中的 extends

    MAINTAINER: 作者 + 作者的邮箱

    RUN: 容器构建时 需要运行的指令

    EXPOSE: 暴露 容器启动后的 端口号

    WORKDIR: 容器启动后, 一旦进入这个容器, 默认进入的目录; 如果不指定 则默认为 / 根目录

    ENV: 在构建镜像的过程中, 设定的环境变量; 举例: ENV WORK_PATH /tmp

    ADD: 该指令表示 COPY + 解压缩, 比 COPY 指令强大;

    COPY: 将源文件 复制到 目的路径下; 使用格式 COPY srcpath destpath 或者 COPY ["srcpath", "destpath"]

    VOLUME: 共享数据卷

    CMD: 启动容器时, 需要执行的命令, 只执行最后一条 CMD 指令; 会被 docker run 之后的参数代替

    ENTRYPOINT: 启动容器时, 需要执行的命令; 会追加到 docker run 之后的参数

    ONBUILD: 当构建 子镜像 时, 如果父镜像中有 ONBUILD 指令, 则 父镜像中的 ONBUILD 被触发 执行!

DcokerFile案例:
    自定义镜像 centos
        GitHub 上的参考地址: https://github.com/docker-library

        0、准备环境
            mkdir -R /root/mine_dockerfile/centos7/
            cd /root/mine_dockerfile/centos7/

        1、创建一个 DockerFile 文件
            vim DockerFile

            # ------------------------------------- Dockerfile 内容 start -----------------------------
            FROM centos:7

            ENV WORK_PATH /tmp
            WORKDIR $WORK_PATH

            # 镜像问题连不上外网 下载不了
            RUN yum -y install vim
            RUN yum -y install net-tools

            EXPOSE 80
            CMD ["/usr/sbin/init"]
            # ------------------------------------- Dockerfile 内容  end  -----------------------------

        2、执行创建指令
            docker rm -f $(docker ps -qa)
            docker rmi -f yangyang0001/centos7

            docker build -f Dockerfile -t yangyang0001/centos7:1.0 .

        3、根据自己的镜像 运行 容器
            docker run --privileged -it yangyang0001/centos7:1.0

        4、查看镜像的 产生历史
            使用格式: docker history IMAGE_ID

            测试指令:
            [root@localhost ~]# docker history yangyang0001/centos7:1.0
            IMAGE          CREATED         CREATED BY                                      SIZE      COMMENT
            39b04f36e0a8   3 minutes ago   /bin/sh -c #(nop)  CMD ["/usr/sbin/init"]       0B
            df47541ce9c4   3 minutes ago   /bin/sh -c #(nop)  EXPOSE 80                    0B
            ca2acfc8f7d1   3 minutes ago   /bin/sh -c yum -y install net-tools             161MB
            73fe977770b8   3 minutes ago   /bin/sh -c yum -y install vim                   216MB
            97b47b4b5304   3 minutes ago   /bin/sh -c #(nop) WORKDIR /tmp                  0B
            980892cca5ec   3 minutes ago   /bin/sh -c #(nop)  ENV WORK_PATH=/tmp           0B
            eeb6ee3f44bd   5 months ago    /bin/sh -c #(nop)  CMD ["/bin/bash"]            0B
            <missing>      5 months ago    /bin/sh -c #(nop)  LABEL org.label-schema.sc…   0B
            <missing>      5 months ago    /bin/sh -c #(nop) ADD file:b3ebbe8bd304723d4…   204MB


    CMD 和 ENTRYPOINT 命令案例: 使用 curl -s https://ip.cn; 如果 使用 curl -s -i https://ip.cn

        0、准备环境
            mkdir -R /root/mine_dockerfile/centos7/
            cd /root/mine_dockerfile/centos7/

        1、创建一个 DockerFile 文件
            vim DockerFile2
            # ------------------------------------- Dockerfile2 内容 start -----------------------------
            FROM centos:7

            RUN yum -y install curl

            # CMD ["curl", "-s", "https://ip.cn"]
            ENTRYPOINT ["curl", "-s", "https://ip.cn"]
            # ------------------------------------- Dockerfile2 内容  end  -----------------------------

        2、执行创建指令
            docker build -f Dockerfile2 -t yangyang0001/centos7:2.0 .

        3、根据自己的镜像 运行 容器
            docker run --privileged -it yangyang0001/centos7:2.0            # CMD 报错, 不能加 -i
            docker run --privileged -it yangyang0001/centos7:2.0 -i         # ENTRYPOINT 没有问题


    ONBUILD 命令案例
        父镜像 parent, 子镜像: child 中 From parent, 如果此时 在父镜像中 有 ONBUILD 指令, 就会在构建 子类镜像的时候 执行 父类的 ONBUILD 指令!

    自定义 tomcat8 案例
        0、准备环境和文件
            mkdir /root/mine_dockerfile/tomcat8
            jdk-8u321-linux-x64.tar.gz
            apache-tomcat-8.5.9.tar.gz

        1、编写 Dockerfile
            cd /root/mine_dockerfile/tomcat8

            vim Dockerfile

            # ------------------------------------- Dockerfile 内容  end  -----------------------------
            FROM centos:7

            RUN yum -y install vim

            # 添加jdk8.tar.gz 并解压, 添加tomcat8.tar.gz 并解压
            ADD jdk-8u321-linux-x64.tar.gz /usr/local
            ADD apache-tomcat-8.5.9.tar.gz /usr/local

            ENV mypath /usr/local
            WORKDIR $mypath

            # 配置环境变量
            ENV JAVA_HOME /usr/local/jdk1.8.0_321
            ENV JRE_HOME /usr/local/jdk1.8.0_321/jre
            ENV CLASSPATH $JRE_HOME/lib/rt.jar:$JRE_HOME/lib/ext
            ENV TOMCAT_HOME /usr/local/apache-tomcat-8.5.9/
            ENV CATALINA_BASE /usr/local/apache-tomcat-8.5.9/
            ENV CATALINA_HOME /usr/local/apache-tomcat-8.5.9/
            ENV PATH $PATH:$JRE_HOME/bin:$JAVA_HOME/bin:$CATALINA_HOME/lib:$CATALINA_HOME/bin

            EXPOSE 8080

            CMD /usr/local/apache-tomcat-8.5.9/bin/startup.sh && tail -fn 200 /usr/local/apache-tomcat-8.5.9/logs/catalina.out
            # ------------------------------------- Dockerfile 内容  end  -----------------------------

        2、构建 镜像 文件
            docker build -f Dockerfile -t yangyang0001/tomcat8:1.0 .

        3、根据 镜像 运行
            docker run -it -p 8888:8080 yangyang0001/tomcat8:1.0


--------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------- 第7章 Docker 常用安装 ----------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------
一般过程为:
    docker search
    docker pull
    docker run

安装 Mysql
    [root@localhost ~]# docker pull mysql:8.0.27

    [root@localhost ~]# docker run -d -p 13306:3306 --name mine_mysql \
    -e MYSQL_ROOT_PASSWORD=123456 \
    -v /root/mine_dockerfile/mysql8.0.27/conf:/etc/mysql/conf.d \
    -v /root/mine_dockerfile/mysql8.0.27/logs:/logs \
    -v /root/mine_dockerfile/mysql8.0.27/data:/var/lib/mysql \
    mysql:8.0.27

    -e 表示 ENV 的配置, 必须是 mysql 中有的配置 key; 我们初始化了一下 密码!

    [root@localhost ~]# docker ps
    CONTAINER ID   IMAGE          COMMAND                  CREATED          STATUS          PORTS                                                    NAMES
    767ab8e424c2   mysql:8.0.27   "docker-entrypoint.s…"   18 seconds ago   Up 17 seconds   33060/tcp, 0.0.0.0:13306->3306/tcp, :::13306->3306/tcp   mine_mysql

其他的参考 DockerHub 上的镜像, 并参考以下 启动过程! 剩下的就是多书写, 多使用!

